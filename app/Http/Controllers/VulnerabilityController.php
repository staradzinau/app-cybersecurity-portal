<?php
declare(strict_types=1);

namespace App\Http\Controllers;

use Illuminate\Support\Facades\View as ViewFacade;
use Illuminate\Support\Facades\Log;
use Illuminate\Contracts\View\View;
use App\Http\Requests\Vulnerability\CreationRequest
    as VulnerabilityCreationRequest;
use App\View\Components\SessionStatus as SessionStatusComponent;
use Illuminate\Support\Facades\Redirect;
use Illuminate\Http\RedirectResponse;
use App\Services\VulnerabilityService;

class VulnerabilityController
{
    public function __construct(
        private VulnerabilityService $vulnerabilityService
    ) {}

    /**
     * Render the basic view of vulnerabilities list
     *
     * @return View
     */
    public function index(): View
    {
        return ViewFacade::make('vulnerability.index');
    }

    /**
     * Render the form to create a new vulnerability record
     *
     * @return View
     */
    public function getCreationView(): View
    {
        return ViewFacade::make('vulnerability.creation.view');
    }

    /**
     * Create a new vulnerability record
     *
     * @param VulnerabilityCreationRequest $request
     * @return RedirectResponse
     */
    public function create(VulnerabilityCreationRequest $request): RedirectResponse
    {
        $this->vulnerabilityService->create(
            code: $request->getCode(),
            title: $request->getTitle(),
            overview: $request->getOverview(),
            description: $request->getDescription(),
            preventionGuide: $request->getPreventionGuide(),
            examplesDescription: $request->getExamplesDescription()
        );

        return Redirect::route('vulnerability.index')
            ->with(
                SessionStatusComponent::STATUS_KEY_VALUE,
                __('A new vulnerability record has been successfully created.')
            );
    }

    /**
     * Delete the vulnerability record with the given id
     *
     * @param int $id
     * @return RedirectResponse
     */
    public function delete(int $id): RedirectResponse
    {
        try {
            $this->vulnerabilityService->delete($id);
            $statusMessage = __('The vulnerability record has been successfully removed.');
        } catch (\Exception $exception) {
            Log::error(
                "The vulnerability record can not be removed.",
                [
                    'id' => $id,
                    'exception' => $exception,
                ]
            );
            $statusMessage = __('The vulnerability record can not be removed.');
        }
        return Redirect::route('vulnerability.index')
            ->with(
                SessionStatusComponent::STATUS_KEY_VALUE,
                $statusMessage
            );
    }
}
